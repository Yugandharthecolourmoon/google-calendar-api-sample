{"version":3,"sources":["Client.js","components/event_list_item.js","components/event_list.js","components/event_input.js","App.js","registerServiceWorker.js","index.js"],"names":["checkStatus","response","status","error","Error","concat","statusText","console","log","parseJSON","json","Client","index","milliseconds","callback","fetch","method","accept","headers","Content-Type","body","JSON","stringify","date","Date","toISOString","substr","then","create","destroy","id","EventListItem","_ref","event","deleteEvent","react_default","a","createElement","onClick","e","start","dateTime","summary","location","className","type","EventList","events","EventListItems","map","event_list_item","key","NoEventList","colSpan","length","EventInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startTime","getTime","hasSent","newEvent","setState","_this2","trim","alert","options","_this3","onNewEventSent","_this4","DateTime_default","utc","value","onChange","placeholder","typingEvent","target","onKeyPress","onPressEnter","onFetchClick","Component","App","loadEvents","bind","assertThisInitialized","hasBeenModified","shouldReload","forceUpdate","event_input","event_list","forceUpdateHandler","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.38e3b0c0.chunk.js","sourcesContent":["const index = (milliseconds, callback) => {\n  return fetch(`/api/events`, {\n    method: 'POST',\n    accept: \"application/json\",\n    headers: {\n      'Content-Type': \"application/json\"\n    },\n    body: JSON.stringify({date: new Date(milliseconds).toISOString().substr(0, 10)})\n  }).then(checkStatus)\n      .then(parseJSON)\n      .then(callback);\n};\n\nconst create = (body, callback) => {\n  return fetch(`/api/event`, {\n    method: 'POST',\n    accept: \"application/json\",\n    headers: {\n      'Content-Type': \"application/json\"\n    },\n    body: JSON.stringify(body)\n  }).then(checkStatus)\n      .then(parseJSON)\n      .then(callback);\n};\n\nconst destroy = (id, callback) => {\n  return fetch(`/events/${id}`, {\n    method: 'DELETE',\n    accept: \"application/json\"\n  }).then(checkStatus)\n      .then(parseJSON)\n      .then(callback);\n};\n\nconst checkStatus = (response) => {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(`HTTP Error ${response.statusText}`);\n  error.status = response.statusText;\n  error.response = response;\n  console.log(error); // eslint-disable-line no-console\n  throw error;\n};\n\nconst parseJSON = (response) => {\n  return response.json();\n};\n\nconst Client = {\n  index,\n  create,\n  destroy\n};\n\nexport default Client;\n","import React from 'react';\nimport Client from '../Client';\n\nconst EventListItem = ({event}) => {\n\n  const deleteEvent = (event) => {\n    Client.destroy(event.id, (event) => {\n      console.log(event);\n    });\n  };\n\n  return (\n      <tr onClick={e => deleteEvent(event)}>\n        <td>{event.start.date?event.start.date:event.start.dateTime}</td>\n        <td>{event.summary}</td>\n        <td>{event.location}</td>\n        <td className=\"text-center\">\n          <button type=\"button\" className=\"btn btn-outline-warning text-right\" onClick={e => deleteEvent(event)}>Done\n          </button>\n        </td>\n      </tr>\n  );\n};\n\nexport default EventListItem;\n","import React from 'react';\nimport EventListItem from './event_list_item';\n\nconst EventList = ({events}) => {\n  console.log(events);\n  const EventListItems = events.map((event) => {\n    return (\n        <EventListItem key={event.id} event={event}/>\n    );\n  });\n  const NoEventList = <tr>\n    <td className=\"text-center\" colSpan={4}>No events found.</td>\n  </tr>;\n\n  return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <div className=\"table-responsive\">\n              <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                  <th>Event date</th>\n                  <th>Summary</th>\n                  <th>Location</th>\n                  <th>Action</th>\n                </tr>\n                </thead>\n                <tbody>\n                {events.length > 0 ? EventListItems : NoEventList}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n};\n\nexport default EventList;\n","import React, {Component} from 'react';\nimport DateTime from 'react-datetime';\nimport Client from '../Client';\n\nclass EventInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      summary: \"\",\n      startTime: new Date().getTime(),\n      hasSent: false,\n      newEvent: \"\"\n    }\n  }\n\n  typingEvent(summary) {\n    this.setState({\n      summary,\n      hasSent: false\n    });\n  }\n\n  onPressEnter(key) {\n    if (key === \"Enter\") {\n      if(!this.state.summary || this.state.summary.trim() === ''){\n        alert(\"Event summary is required.\");\n        return;\n      }\n      const options = {\n        summary: this.state.summary,\n        date: this.state.startTime\n      };\n      Client.create(options, (event) => {\n        this.setState({\n          newEvent: event.summary,\n          summary: \"\",\n          hasSent: true\n        });\n      });\n    }\n  }\n\n  onFetchClick() {\n    Client.index(this.state.startTime, events => {\n      this.props.onNewEventSent(events);\n    });\n  }\n\n  render() {\n    return (\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-3\">\n              <div className=\"form-group\">\n                <label>Event Date</label>\n                <DateTime utc={true} value={new Date()} onChange={value => {\n                  this.setState({startTime: (new Date(value)).getTime()})\n                }}/>\n              </div>\n            </div>\n            <div className=\"col-md-7\">\n              <div className=\"form-group\">\n                <label>Event summary</label>\n                <div className=\"input-group\">\n                  <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      placeholder=\"Enter your new task and press enter.\"\n                      value={this.state.summary}\n                      onChange={e => this.typingEvent(e.target.value)}\n                      onKeyPress={e => this.onPressEnter(e.key)}/>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-2 text-right\">\n              <div className=\"form-group\">\n                <label className=\"col-md-12\">&nbsp;</label>\n                <button type=\"button\" className=\"btn btn-success\" onClick={e => this.onPressEnter(\"Enter\")}>\n                  Add Event\n                </button>\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-12 p-3\">\n              <button type=\"button\" className=\"btn btn-primary\" onClick={e => this.onFetchClick()}>\n                Fetch Events\n              </button>\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default EventInput;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Client from './Client';\n\nimport EventList from './components/event_list';\nimport EventInput from './components/event_input';\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n\n      this.loadEvents = this.loadEvents.bind(this);\n\n      this.state = {\n          events: [],\n          hasBeenModified: false\n      };\n\n      this.loadEvents();\n  }\n\n  loadEvents() {\n      Client.index(new Date(),events => {\n        console.log(events);\n          this.setState({ events, shouldReload: false });\n      });\n  }\n\n  forceUpdateHandler() {\n      this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <EventInput onNewEventSent={events => this.setState({ events, hasBeenModified: true })} />\n        <EventList events={this.state.events} onClick={this.forceUpdateHandler} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}